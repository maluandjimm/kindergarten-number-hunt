{"note":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Number Hunt! (0-5)<\/title>\n    <!-- Tailwind CSS CDN -->\n    <script src=\"https:\/\/cdn.tailwindcss.com\"><\/script>\n    <!-- Google Fonts - Inter -->\n    <link href=\"https:\/\/fonts.googleapis.com\/css2?family=Inter:wght@400;600;700;800&display=swap\" rel=\"stylesheet\">\n    <!-- Tone.js CDN for sound effects -->\n    <script src=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/tone\/14.8.49\/Tone.min.js\"><\/script>\n    <style>\n        \/* Custom animation for a subtle pulse effect on correct answer *\/\n        @keyframes pulse-once {\n            0% { transform: scale(1); }\n            50% { transform: scale(1.02); }\n            100% { transform: scale(1); }\n        }\n        .animate-pulse-once {\n            animation: pulse-once 0.5s ease-in-out;\n        }\n        \/* Ensure font-inter is applied globally *\/\n        body {\n            font-family: 'Inter', sans-serif;\n        }\n    <\/style>\n<\/head>\n<body class=\"min-h-screen bg-gradient-to-br from-purple-200 to-blue-200 flex items-center justify-center p-4\">\n    <div id=\"app\" class=\"bg-white rounded-3xl shadow-2xl p-6 md:p-10 w-full max-w-2xl flex flex-col items-center space-y-6\">\n        <!-- Game Title -->\n        <h1 class=\"text-4xl md:text-5xl font-extrabold text-purple-700 mb-4 text-center\">Number Hunt!<\/h1>\n\n        <!-- Game Area - Where numbers\/emojis appear -->\n        <div id=\"game-area\" class=\"w-full h-80 md:h-96 bg-blue-50 rounded-2xl border-4 border-blue-300 flex items-center justify-center relative overflow-hidden\">\n            <!-- Initial instruction text -->\n            <p id=\"instruction\" class=\"text-2xl md:text-3xl font-semibold text-gray-700 text-center\">Click \"Start Game\" to begin!<\/p>\n            <!-- Feedback display (Correct\/Try again) -->\n            <div id=\"feedback\" class=\"absolute bottom-4 text-2xl font-bold\"><\/div>\n        <\/div>\n\n        <!-- Options Container - For \"Count the Objects\" round -->\n        <div id=\"options-container\" class=\"grid grid-cols-3 gap-4 w-full max-w-sm hidden\">\n            <!-- Number buttons (0-5) will be injected here -->\n        <\/div>\n\n        <!-- Start\/Play Again Button -->\n        <button id=\"start-button\" class=\"bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-8 rounded-full shadow-lg transform transition-transform duration-200 hover:scale-105\">\n            Start Game\n        <\/button>\n    <\/div>\n\n    <script>\n        \/\/ Global variables for game state\n        let currentTargetNumber;\n        let currentRoundType; \/\/ 'findNumber' or 'countObjects'\n        let currentEmoji;\n        let gameActive = false;\n        let roundCount = 0;\n        const MAX_ROUNDS = 5; \/\/ Total rounds per game\n\n        \/\/ Tone.js setup for sound effects\n        let synth; \/\/ General synthesizer for notes\n        let correctSound; \/\/ Specific sound for correct answers\n        let incorrectSound; \/\/ Specific sound for incorrect answers\n\n        \/\/ Function to initialize sound context and synthesizers\n        function initSounds() {\n            \/\/ Start Tone.js context on user interaction (required by browsers)\n            if (Tone.context.state !== 'running') {\n                Tone.start();\n            }\n            \/\/ Basic synth for general tones\n            synth = new Tone.Synth().toDestination();\n            \/\/ PolySynth for a more pleasant \"correct\" sound (chord)\n            correctSound = new Tone.PolySynth(Tone.Synth, {\n                oscillator: { type: \"sine\" }, \/\/ Sine wave for smooth sound\n                envelope: {\n                    attack: 0.02,\n                    decay: 0.1,\n                    sustain: 0.1,\n                    release: 0.2\n                }\n            }).toDestination();\n            \/\/ NoiseSynth for a short \"incorrect\" sound\n            incorrectSound = new Tone.NoiseSynth({\n                envelope: {\n                    attack: 0.005,\n                    decay: 0.1,\n                    sustain: 0.05,\n                    release: 0.1\n                }\n            }).toDestination();\n        }\n\n        \/\/ Wait for the DOM to be fully loaded before running the script\n        document.addEventListener('DOMContentLoaded', () => {\n            \/\/ Get references to DOM elements\n            const gameArea = document.getElementById('game-area');\n            const instructionDisplay = document.getElementById('instruction');\n            const feedbackDisplay = document.getElementById('feedback');\n            const startButton = document.getElementById('start-button');\n            const optionsContainer = document.getElementById('options-container');\n\n            \/\/ Arrays for game content\n            const numbers = [0, 1, 2, 3, 4, 5]; \/\/ Numbers to be recognized\/counted\n            const emojis = ['⭐', '🍎', '🎈', '🦋', '🚗', '🍦', '🌳', '🌻']; \/\/ Emojis for counting objects\n\n            \/\/ Event listener for the Start\/Play Again button\n            startButton.addEventListener('click', () => {\n                initSounds(); \/\/ Initialize sounds when the user interacts\n                startGame();\n            });\n\n            \/\/ Function to start a new game\n            function startGame() {\n                gameActive = true; \/\/ Set game state to active\n                roundCount = 0; \/\/ Reset round counter\n                startButton.classList.add('hidden'); \/\/ Hide the start button\n                optionsContainer.classList.add('hidden'); \/\/ Ensure options are hidden initially\n                nextRound(); \/\/ Start the first round\n            }\n\n            \/\/ Function to advance to the next round\n            function nextRound() {\n                \/\/ Check if all rounds are completed\n                if (roundCount >= MAX_ROUNDS) {\n                    endGame(); \/\/ End the game if max rounds reached\n                    return;\n                }\n                roundCount++; \/\/ Increment round counter\n                feedbackDisplay.textContent = ''; \/\/ Clear previous feedback message\n                gameArea.innerHTML = ''; \/\/ Clear content from the game area\n                optionsContainer.innerHTML = ''; \/\/ Clear content from the options container\n\n                \/\/ Randomly choose between \"Find the Number\" or \"Count the Objects\" round\n                currentRoundType = Math.random() < 0.5 ? 'findNumber' : 'countObjects';\n\n                if (currentRoundType === 'findNumber') {\n                    generateFindNumberRound();\n                } else {\n                    generateCountObjectsRound();\n                }\n            }\n\n            \/\/ Function to set up a \"Find the Number\" round\n            function generateFindNumberRound() {\n                currentTargetNumber = Math.floor(Math.random() * 6); \/\/ Random target number (0-5)\n                instructionDisplay.textContent = `Find the number ${currentTargetNumber}!`; \/\/ Update instruction\n                optionsContainer.classList.add('hidden'); \/\/ Hide options for this round type\n\n                const displayedNumbers = new Set(); \/\/ Use a Set to ensure unique numbers\n                displayedNumbers.add(currentTargetNumber); \/\/ Always include the target number\n\n                \/\/ Add 4-5 other random numbers as distractors until 5 unique numbers are present\n                while (displayedNumbers.size < 5) {\n                    displayedNumbers.add(Math.floor(Math.random() * 6));\n                }\n\n                \/\/ Create and position clickable number elements\n                displayedNumbers.forEach(num => {\n                    createClickableNumber(num, gameArea, 'findNumber');\n                });\n            }\n\n            \/\/ Function to set up a \"Count the Objects\" round\n            function generateCountObjectsRound() {\n                currentTargetNumber = Math.floor(Math.random() * 6); \/\/ Random quantity (0-5)\n                currentEmoji = emojis[Math.floor(Math.random() * emojis.length)]; \/\/ Random emoji\n                instructionDisplay.textContent = `How many ${currentEmoji} do you see?`; \/\/ Update instruction\n                optionsContainer.classList.remove('hidden'); \/\/ Show options for this round type\n\n                \/\/ Display the specified number of emojis\n                for (let i = 0; i < currentTargetNumber; i++) {\n                    createClickableEmoji(currentEmoji, gameArea);\n                }\n\n                \/\/ Create and display clickable number buttons (0-5) for selection\n                numbers.forEach(num => {\n                    const button = document.createElement('button');\n                    button.textContent = num;\n                    button.className = 'bg-blue-500 hover:bg-blue-600 text-white font-bold py-4 px-6 rounded-xl shadow-md transform transition-transform duration-200 hover:scale-105 text-3xl md:text-4xl';\n                    button.dataset.value = num; \/\/ Store the number value in a data attribute\n                    \/\/ Attach click listener to check the answer\n                    button.addEventListener('click', (event) => checkAnswer(event.target.dataset.value, 'countObjects'));\n                    optionsContainer.appendChild(button);\n                });\n            }\n\n            \/\/ Helper function to create a clickable number element for \"Find the Number\"\n            function createClickableNumber(num, parentElement, roundType) {\n                const numDiv = document.createElement('div');\n                numDiv.textContent = num;\n                numDiv.className = 'absolute cursor-pointer select-none text-6xl md:text-8xl font-extrabold text-purple-800 bg-white rounded-full p-4 shadow-lg transform transition-transform duration-200 hover:scale-110 flex items-center justify-center';\n                numDiv.dataset.value = num; \/\/ Store the number value\n\n                \/\/ Calculate random position within the parent element\n                const parentRect = parentElement.getBoundingClientRect();\n                \/\/ Approximate size of the number div for positioning to avoid going off-screen\n                const numDivApproxSize = 120; \n                const maxX = parentRect.width - numDivApproxSize;\n                const maxY = parentRect.height - numDivApproxSize;\n\n                numDiv.style.left = `${Math.random() * maxX}px`;\n                numDiv.style.top = `${Math.random() * maxY}px`;\n\n                \/\/ Attach click listener to check the answer\n                numDiv.addEventListener('click', (event) => checkAnswer(event.target.dataset.value, roundType));\n                parentElement.appendChild(numDiv);\n            }\n\n            \/\/ Helper function to create an emoji element for \"Count the Objects\"\n            function createClickableEmoji(emoji, parentElement) {\n                const emojiDiv = document.createElement('div');\n                emojiDiv.textContent = emoji;\n                emojiDiv.className = 'absolute select-none text-6xl md:text-8xl'; \/\/ Large emoji size\n\n                \/\/ Calculate random position within the parent element\n                const parentRect = parentElement.getBoundingClientRect();\n                \/\/ Approximate size of the emoji div for positioning\n                const emojiApproxSize = 80; \n                const maxX = parentRect.width - emojiApproxSize;\n                const maxY = parentRect.height - emojiApproxSize;\n\n                emojiDiv.style.left = `${Math.random() * maxX}px`;\n                emojiDiv.style.top = `${Math.random() * maxY}px`;\n\n                parentElement.appendChild(emojiDiv);\n            }\n\n            \/\/ Function to check the user's answer\n            function checkAnswer(selectedValue, type) {\n                if (!gameActive) return; \/\/ Do nothing if game is not active\n\n                const value = parseInt(selectedValue); \/\/ Convert selected value to an integer\n\n                if (value === currentTargetNumber) {\n                    \/\/ Correct answer\n                    feedbackDisplay.textContent = 'Correct!';\n                    feedbackDisplay.classList.remove('text-red-600');\n                    feedbackDisplay.classList.add('text-green-600');\n                    correctSound.triggerAttackRelease([\"C4\", \"E4\", \"G4\"], \"8n\"); \/\/ Play a happy chord\n\n                    \/\/ Add a subtle pulse animation to the game area\n                    gameArea.classList.add('animate-pulse-once');\n                    \/\/ Remove animation class after it completes\n                    setTimeout(() => {\n                        gameArea.classList.remove('animate-pulse-once');\n                        \/\/ Advance to the next round after a short delay\n                        setTimeout(nextRound, 1000); \n                    }, 500); \/\/ Animation duration\n                } else {\n                    \/\/ Incorrect answer\n                    feedbackDisplay.textContent = 'Try again!';\n                    feedbackDisplay.classList.remove('text-green-600');\n                    feedbackDisplay.classList.add('text-red-600');\n                    incorrectSound.triggerAttackRelease(\"8n\"); \/\/ Play a short noise\n                }\n            }\n\n            \/\/ Function to end the game\n            function endGame() {\n                gameActive = false; \/\/ Set game state to inactive\n                instructionDisplay.textContent = 'Game Over! You completed all rounds!';\n                feedbackDisplay.textContent = ''; \/\/ Clear feedback\n                gameArea.innerHTML = '<p class=\"text-3xl font-bold text-green-700\">🎉 Great Job! 🎉<\/p>'; \/\/ Display final message\n                optionsContainer.classList.add('hidden'); \/\/ Hide options\n                startButton.textContent = 'Play Again'; \/\/ Change button text\n                startButton.classList.remove('hidden'); \/\/ Show play again button\n            }\n\n            \/\/ Initial state when the page loads\n            startButton.classList.remove('hidden'); \/\/ Ensure start button is visible\n        });\n    <\/script>\n<\/body>\n<\/html>\n","textColorIndex":1,"bgColorIndex":0}